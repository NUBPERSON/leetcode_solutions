class Solution {
public:
    int shortestPath(vector<vector<int>>& grid, int k) {
        queue<vector<int>>q;
      
            q.push({0,0,k});
        int level=0;
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>>dir={{1,0},{0,1},{-1,0},{0,-1}};
        unordered_map<string,int>map;
        string s=to_string(0)+to_string(0)+to_string(k);
        map[s]=1;
        while(q.size()){
            int size=q.size();
            while(size--){
                vector<int>a=q.front();
                q.pop();
                if(a[0]==n-1 && a[1]==m-1)
                    return level;
                for(int i=0;i<4;i++){
                    int r=a[0]+dir[i][0];
                    int c=a[1]+dir[i][1];
                    if(r>=0 && c>=0 && r<n && c<m){
                        if(grid[r][c]==0){
                            s=to_string(r)+to_string(c)+to_string(a[2]);
                            if(map[s]==0)
                            q.push({r,c,a[2]});
                            map[s]=1;
                        }
                        else if(grid[r][c]==1 && a[2]>0){
                              s=to_string(r)+to_string(c)+to_string(a[2]-1);
                            if(map[s]==0)
                            q.push({r,c,a[2]-1});
                            map[s]=1;
                        }
                    }
                    
                }
                
            }
            level++;
        }
        return -1;
    }
    
};