/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int helper(TreeNode* root,unordered_map<int,int>&m){
        if(root==NULL)
            return 0;
        int left=helper(root->left,m);
        int right=helper(root->right,m);
        int val=left+right+root->val;
      
        m[val]++;
        return val;
    }
    vector<int> findFrequentTreeSum(TreeNode* root) {
        unordered_map<int,int>m;
        helper(root,m);
        int ma=INT_MIN;
        for(pair<int,int>a:m){
            ma=max(ma,a.second); 
        }
    
        vector<int>ans;
        for(pair<int,int>a:m){
            if(a.second==ma)
                ans.push_back(a.first);
        }
        return ans;
    }
};