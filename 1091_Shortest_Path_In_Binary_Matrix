class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        if(grid[0][0]==1 || grid[n-1][n-1]==1)
            return -1;
        if(n==1 )
            return 1;
        queue<pair<int,int>>q;
        q.push({0,0});
        grid[0][0]=1;
        int level=0;
        vector<vector<int>>dir={{1,0},{0,1},{-1,0},{0,-1},{1,1},{-1,1},{1,-1},{-1,-1}};
        while(q.size()){
            int z=q.size();
            while(z--){
                auto a=q.front();
                q.pop();
                
                for(int i=0;i<8;i++){
                    int x=a.first+dir[i][0];
                    int y=a.second+dir[i][1];
                    if(x>=0 && y>=0 && x<n &&y<n && grid[x][y]!=1){
                        //cout<<x<<" "<<y<<endl;
                        if(x==n-1 && y==n-1)
                            return level+2;
                        q.push({x,y});
                        grid[x][y]=1;
                    }
                }
            }
            level++;
        }
        return -1;
    }
};