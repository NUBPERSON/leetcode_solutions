class Solution {
public:
    int mod=1000000007;
    long long int helper(int s,int f,int fuel,vector<vector<int>>&graph, vector<vector<int>>&dp){
        if(fuel<0)
            return  0;
        if(dp[s][fuel]!=-1)
            return dp[s][fuel];
        long long int ans=0;
        for(int i=0;i<graph.size();i++){
            if(s!=i){
               ans+= helper(i,f,fuel-graph[s][i],graph,dp);
            }
        }
        if(s==f)
            ans++;
        return dp[s][fuel]=ans%mod;
    }
    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {
        vector<vector<int>>dp(locations.size(),vector<int>(fuel+1,-1));
        vector<vector<int>>graph(locations.size(),vector<int>(locations.size(),-1));
        for(int i=0;i<locations.size();i++){
            for(int j=i+1;j<locations.size();j++){
                 graph[i][j]=abs(locations[i]-locations[j]);
                 graph[j][i]=abs(locations[i]-locations[j]);
            }
        }
       return (helper(start,finish,fuel,graph,dp)%mod);
    }
};